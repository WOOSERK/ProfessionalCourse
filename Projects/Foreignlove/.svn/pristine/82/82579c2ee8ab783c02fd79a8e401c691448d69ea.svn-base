package kr.co.foreignlove.dao;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

import javax.naming.NamingException;

import kr.co.foreignlove.controller.DBManager;
import kr.co.foreignlove.service.board.boardmarket.BoardMarketListService;
import kr.co.foreignlove.vo.BoardMarketVO;
import kr.co.foreignlove.vo.BoardTypeVO;
import kr.co.foreignlove.vo.BoardVO;

public class BoardMarketDAO implements BoardDAO
{
	public static final String NAME ="BoardMarket";

	private static BoardMarketDAO dao;
	
	public BoardMarketDAO() {}
	
	public static BoardMarketDAO getInstance()
	{
		if(dao == null)
		{
			dao = new BoardMarketDAO();
		}
		return dao;
	}
	
   public boolean insert(BoardVO board) {
	return false;
	  
   }
   
   public boolean delete(int b_id) {
	return false;
	   
   }
   
   public boolean update(BoardVO board) {
	return false;
	   
	   
   }
   
   public BoardVO getBoard(int b_id) {
	return null;
	   
   }
   
   
   
	
	public BoardTypeVO find(String bt_type) {
		BoardTypeVO btType = new BoardTypeVO();
		
		Connection con = null;
		Statement stmt = null;
		ResultSet rs = null;
		
		try {
			con=DBManager.getConnection();
			stmt=con.createStatement();
			String sql ="SELECT* FROM btType where bt_type like'"+bt_type+"';";
			rs=stmt.executeQuery(sql);
			
			if(rs.next()) {
				btType.setBt_type(rs.getString("bt_type"));
				btType.setBt_typeName(rs.getString("bt_typeName"));
			}
		}
		catch (NamingException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DBManager.close(rs,stmt,con);
		}	
		
		return btType;
	}
	
	
	
	

	public ArrayList<BoardVO> getList(int page, int pageSize, String condition, String word)
	{
		
		String sql = "SELECT * FROM boardMarket";
		Connection con = null;
		Statement stmt = null;
		ResultSet rs = null;
		ArrayList<BoardVO> list = new ArrayList<>();
		
		try
		{
			con = DBManager.getConnection();
			stmt = con.createStatement();
			rs = stmt.executeQuery(sql);
			
			while(rs.next())
			{
				BoardVO bm = new BoardVO();
				
				bm.setB_id(rs.getInt("b_id"));
				bm.setB_title(rs.getString("b_title"));
				bm.setB_content(rs.getString("b_content"));
				bm.setB_post(rs.getString("b_post"));
				bm.setB_delete(rs.getString("b_delete"));
				bm.setB_count(rs.getInt("b_count"));
				bm.s(rs.getString("mk_price"));
				bm.setMk_area(rs.getString("mk_area"));
				bm.setMk_type(rs.getString("mk_type"));
				
				String m_nick=rs.getString("m_nick");
				String bt_type=rs.getString("bt_type");
				String l_type=rs.getString("l_type");
				String tw_type=rs.getString("tw_type");
				String ts_type=rs.getString("ts_type");
				
				MemberDAO mDao = MemberDAO.getInstance();
				bm.setM_nick(mDao.findMember(m_nick));
				
				BoardMarketDAO btDao = BoardMarketDAO.getInstance();
				bm.setBt_type(btDao.find(bt_type));
				
				LowTypeDAO lDao = LowTypeDAO.getInstance();
				bm.setL_type(lDao.find(l_type));
				
				TradeWayDAO twDao = TradeWayDAO.getInstance();
				bm.setTw_type(twDao.find(tw_type));
				
				TradeStepDAO tsDao = TradeStepDAO.getInstance();
				bm.setTs_type(tsDao.find(ts_type));
				
				
				list.add(bm);
			}
		}
		catch(NamingException e)
		{
			e.printStackTrace();
		}
		catch(SQLException e)
		{
			e.printStackTrace();
		}
		finally
		{
			DBManager.close(rs, stmt, con);
		}
		
		return list;
	}
	
	public int getTotalRecord(String condition, String word)
	{
		StringBuffer sb = new StringBuffer("SELECT COUNT(*) FROM boardMarket");
		
		switch(condition)
		{
		case BoardMarketListService.CONDITION_TITLE:
			sb.append("WHERE title LIKE '%" + word + "%'");
			break;
		case BoardMarketListService.CONDITION_CONTENT:
			sb.append("WHERE content LIKE '%" + word + "%'");
			break;
		default:
			sb.append(" WHERE title LIKE '%" + word + "%'");	
			sb.append("OR content LIKE '%" + word + "%'");
		}
		
		Connection con = null;
		Statement stmt = null;
		ResultSet rs = null;
		int rowCount = 0;
		
		try
		{
			con = DBManager.getConnection();
			stmt = con.createStatement();
			rs = stmt.executeQuery(sb.toString());
			if(rs.next())
			{
				rowCount = rs.getInt(1);
			}
		}
		catch(NamingException e)
		{
			e.printStackTrace();
		}
		catch(SQLException e)
		{
			e.printStackTrace();
		}
		finally
		{
			DBManager.close(rs, stmt, con);
		}
		
		return rowCount;
	}
}
